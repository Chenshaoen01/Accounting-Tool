@{
    ViewData["Title"] = " - 新增/編輯資料";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="app" class="text-center">
    <div class="container max-width-500">
        @* 新增/編輯區域 *@
        <div>
            @* 支出/收入 *@
            <label class="form-label w-100 d-flex flex-column align-items-start">
                <span class="fw-bold">支出/收入</span>
                <select class="form-select border border-dark bg-transparent" v-model="form.category.value" :disabled="mode === 'Edit'">
                    <option value="expense">支出</option>
                    <option value="income">收入</option>
                </select>
            </label>
            @* 種類 *@
            <label class="form-label w-100 d-flex flex-column align-items-start">
                <span class="fw-bold">種類</span>
                <select class="form-select border border-dark bg-transparent" v-model="form.label.value">
                    <option :value="item.id" v-for="item in categoryList" :key="item.id">
                        <i :class="item.labelContent.icon"></i>
                        {{item.name}}
                    </option>
                </select>
            </label>
            @* 日期 *@
            <label class="form-label w-100 d-flex flex-column align-items-start">
                <span class="fw-bold">日期</span>
                <input type="date" class="form-control border border-dark bg-transparent" v-model="form.time.value" />
            </label>
            @* 備註 *@
            <label class="form-label w-100 d-flex flex-column align-items-start">
                <span class="fw-bold">備註</span>
                <input type="text" class="form-control border border-dark bg-transparent" v-model="form.description.value">
            </label>
            @* 金額 *@
            <label class="form-label w-100 d-flex flex-column align-items-start">
                <span class="fw-bold">金額</span>
                <input type="number" class="form-control border border-dark bg-transparent" v-model="form.price.value">
            </label>

            @* 計算機 *@
            <div class="border border-dark rounded p-3 mb-3">
                <input type="text" class="form-control border border-dark bg-transparent" v-model="calculator.processDescription">
                <div class="container mt-3">
                    <div class="row">
                        @* 數字區域 *@
                        <div class="col-8 container mt-3">
                            <div class="row gy-3 border-end border-dark">
                                <div class="col-4 d-flex justify-content-center" v-for="item in calculator.numberList" :key="item">
                                    <button type="button" class="d-flex align-items-center justify-content-center border border-dark bg-transparent calculatorButton"
                                            v-on:click="calculatorButtonFunction(item.value)">
                                        <span v-if="item.type ==='icon'"><i :class="item.buttonContent"></i></span>
                                        <span v-else>{{item.buttonContent}}</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        @* 功能按鈕區域 *@
                        <div class="col-4 container mt-3">
                            <div class="row gy-3 gx-2">
                                <div class="col-6 d-flex justify-content-center" v-for="item in calculator.buttonList" :key="item">
                                    <button type="button" class="d-flex align-items-center justify-content-center border border-dark bg-transparent calculatorButton"
                                            v-on:click="calculatorButtonFunction(item.value)">
                                        <span v-if="item.type ==='icon'"><i :class="item.buttonContent"></i></span>
                                        <span v-else>{{item.buttonContent}}</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @* 送出按鈕 *@
            <div class="text-center">
                <button type="button" class="btn btn-dark" v-on:click="submit">送出</button>
            </div>

        </div>
    </div>
</div>
@section scripts{
    <script>
        const app = Vue.createApp({
            mixins: [VueMxin, calculatorMixin],
            data() {
                return {
                    categoryList: null,
                    mode: null,
                    form: {
                        Id: { value: null, columnName: "Id", validateTypes: [] },
                        category: { value: "expense", columnName: "支出/收入", validateTypes: ["required"] },
                        label: { value: null, columnName: "種類", validateTypes: ["required"] },
                        time: { value: null, columnName: "日期", validateTypes: ["required"] },
                        description: { value: null, columnName: "備註", validateTypes: [] },
                        price: { value: null, columnName: "金額", validateTypes: ["required"] },
                    },
                }
            }
            , created() {
                // 取得token
                this.getToken();
                // 取得類別種類
                this.getCategoryList();
                // 設定模式
                this.mode = "Create"
                if ("@ViewBag.Id") {
                    this.mode = "Edit";
                }
                if ("@ViewBag.Category") {
                    this.form.category.value = "@ViewBag.Category";
                }
            }
            , mounted() {
                if ("@ViewBag.Id") {
                    // 設定資料Id
                    this.form.Id.value = "@ViewBag.Id";
                    // 依Id取得資料
                    this.getDataById();
                }
                // 關閉資料載入畫面
                this.QueryPageLoadingEnd();
            }
            , methods: {
                getDataById() {
                    // 顯示資料載入畫面
                    this.QueryPageLoadingStart();

                    const url = window.location.origin+"/api/AccountingTool/getData/" + this.form.Id.value;
                    axios({
                        url: url,
                        method: "GET",
                        headers: {
                            Authorization: `Bearer ${this.getToken()}`
                        }
                    })
                    .then((res) => {
                        for(let key in res.data[0]) {
                           if (this.form[key] !== undefined) {
                              this.form[key].value = res.data[0][key]
                           }
                        }
                        // 編輯日期格式
                        this.form.time.value = this.dateTransfer(res.data[0].time)
                    })
                    .finally(() => {
                        // 關閉資料載入畫面
                        this.QueryPageLoadingEnd();
                    })
                },
                getCategoryList() {
                    const url = window.location.origin + "/api/AccountingTool/getLabelList";
                    axios({
                        url: url,
                        method: "GET",
                        headers: {
                            Authorization: `Bearer ${this.getToken()}`
                        }
                    }).then((res) => {
                        this.categoryList = res.data
                    })
                },
                submit() {
                    // 進行表單驗證
                    const ValidateResult = this.validate(this.form);
                    if (ValidateResult.length > 0) {
                        this.modalShow("項目填寫不完全或格式錯誤", ValidateResult, "error");
                    } else {
                        this.loadingStart();
                        axios({
                            url: window.location.origin + "/api/AccountingTool",
                            method: this.mode === "Edit" ? "PUT" : "POST",
                            data: this.getAxiosData(this.form),
                            headers: {
                                Authorization: `Bearer ${this.getToken()}`
                            }
                        }).then((res) => {
                            if (this.mode === "Create") {
                                this.modalShow("成功建立資料", "即將回到首頁", "success");
                            } else {
                                this.modalShow("成功更新資料", "即將回到首頁", "success");
                            }

                            // 進入首頁
                            setTimeout(() => {
                                window.location = window.location.origin;
                            }, "2000")

                        }).catch((err) => {
                            if (this.mode === "Create") {
                                this.modalShow("建立資料失敗", null, "error");
                            } else {
                                this.modalShow("更新資料失敗", null, "error");
                            }
                        }).finally(() => {
                            this.loadingEnd();
                        })
                    }
                }
            }
        });
        const vm = app.mount('#app');
    </script>
}



