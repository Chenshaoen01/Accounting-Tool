@{
    ViewData["Title"] = "Home Page";
}

<div id="app" class="text-center">
    <div class="btn-group btn-group-lg mb-5" role="group" aria-label="Basic example">
        <button type="button" class="btn btn-dark shadow-none">支出</button>
        <button type="button" class="btn shadow-none btn-dark">收入</button>
        <button type="button" class="btn shadow-none btn-dark">盈餘</button>
    </div>
    
    <div class="container max-width-500">
        @* 圖表區域 *@
        <canvas id="myChart" class="mb-3"></canvas>
        @* 資料細項 *@
        <div class="mb-3">
            <div class="accordion mb-3" id="accordionExample">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button bg-dark text-white" type="button" data-bs-toggle="collapse"
                          data-bs-target="#collapseOne" aria-controls="collapseOne">
                            Accordion Item #1
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <strong>This is the first item's accordion body.</strong>
                            It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
            </div>

            <div class="accordion" id="accordionExample2">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button bg-dark text-white" type="button" data-bs-toggle="collapse"
                          data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                            Accordion Item #1
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse show" data-bs-parent="#accordionExample2">
                        <div class="accordion-body">
                            <strong>This is the first item's accordion body.</strong>
                            It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* 新增按鈕 *@
        <button type="button" class="btn shadow-none" v-on:click="addAccountingDataPage">
            <i class="bi bi-plus-circle-fill fs-2"></i>
        </button>
    </div>
    

    
</div>
@section scripts{
    <script type="module">
        const ctx = document.getElementById('myChart');

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
    <script>
        const app = Vue.createApp({
            data() {
                return {
                    chart: null,
                    chartContent: {
                        type: 'bar',
                        data: {
                            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                            datasets: [{
                                label: '# of Votes',
                                data: [12, 19, 3, 5, 2, 3],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            },

                        }
                    }
                }
            }
            , mounted() {
                this.chart = this.newChart();
            }
            , methods: {
                newChart() {
                    const ctx = document.getElementById('myChart');
                    return new Chart(ctx, this.chartContent);
                },
                updateChart() {
                    this.chart.destroy();
                    this.chart = newChart();
                },
                addAccountingDataPage() {
                    window.location = window.location.origin + "/AccountingData/CreateAndUpdate"
                }
            }
        });
        const vm = app.mount('#app');
    </script>
}

