@{
    ViewData["Title"] = "Home Page";
}

<div id="app" class="text-center">
    <div class="container max-width-500">
        @* 切換支出/收入/盈餘 *@
        <div class="btn-group btn-group-lg mb-3" role="group" aria-label="Basic example">
            <button v-for="item in buttonGroupItems" :key="'button-group-'+item.value" v-on:click="changeCategory(item.value)"
                    type="button" :id="'button-group-'+item.value" class="btn border shadow-none">
                {{item.text}}
            </button>
        </div>
        @* 輸入時間篩選條件 *@
        <div class="text-start border rounded mb-3 p-3">
            <h5 class="fw-bold mb-3">資料時間區間</h5>
            <div class="d-flex align-items-center mb-3">
                <span class="me-3">從</span><input type="date" class="form-control"
                v-model="searchDate.startDate" v-on:change="getDataList" />
            </div>
            <div class="d-flex align-items-center">
                <span class="me-3">到</span><input type="date" class="form-control"
                v-model="searchDate.endDate"  v-on:change="getDataList"/>
            </div>
        </div>
        @* 圖表區域 *@
        <canvas id="myChart" class="mb-3"></canvas>
        <button v-on:click="updateChart" class="btn btn-dark">更新圖表資料</button>
        @* 資料細項 *@
        <h3 class="py-5" v-if="dataList.length ===0">查無資料</h3>
        <div class="accordion mb-3">
            <div class="accordion-item mb-3" v-for="(item, index) in dataList" :key="item.id">
                <h2 class="accordion-header" id="headingOne">
                    <div class="bg-dark text-white w-100 fs-5 p-2 ps-3 text-start" type="button"
                    data-bs-toggle="collapse" :data-bs-target="'#'+'data-'+item.id"
                    aria-expanded="true" :aria-controls="'data-'+item.id">
                        <i :class="item.labelContent.icon"></i>
                        <span class="ms-2">{{item.labelContent.name}}</span>
                        <span class="ms-2">{{item.price}}元</span>
                        <span class="ms-2">{{item.time}}</span>
                    </div>
                </h2>
                @* 詳細資料 *@
                <div :id="'data-'+item.id" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                    <div class="accordion-body text-start">
                        <div class="border-bottom py-2">類別：{{item.labelContent.name}}</div>
                        <div class="border-bottom py-2">時間：{{item.time}}</div>
                        <div class="border-bottom py-2">金額：{{item.price}}</div>
                        <div class="py-2">描述：{{item.description}}</div>
                        <div class="py-2 text-center">
                            <button type="button" class="btn btn-dark me-2" v-on:click="editPage(item.id)">編輯</button>
                            <button type="button" class="btn btn-dark" v-on:click="deleteData(item.id)">刪除</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* 新增按鈕 *@
        <button type="button" class="btn shadow-none" v-on:click="createPage">
            <i class="bi bi-plus-circle-fill fs-2"></i>
        </button>
    </div>
</div>
@section scripts{
    <script>
        const app = Vue.createApp({
            mixins: [VueMxin, ChartMxin],
            data() {
                return {
                    buttonGroupItems: [
                        { text: "支出", value: "expense"},
                        { text: "收入", value: "income"},
                        { text: "盈餘", value: "total"}
                    ],
                    searchDate: {
                        startDate: null,
                        endDate: null
                    },
                    category: "expense",
                    dataList: []
                }
            }
            ,created() {
                // 設定資料篩選時間
                const currentDate = new Date();
                const oneMonthAgDate = new Date();
                oneMonthAgDate.setMonth(currentDate.getMonth() - 1);

                this.searchDate.startDate = this.dateTransfer(oneMonthAgDate);
                this.searchDate.endDate = this.dateTransfer(currentDate);
            }
            , mounted() {
                this.changeCategory("expense")
                this.chart = this.newChart();
            }
            , methods: {
                changeCategory(categoryButtonItemValue) {
                    // 設定支出/收入/盈餘模式
                    this.category = categoryButtonItemValue
                    this.buttonGroupItems.forEach(item => {
                        const buttonItemId = `button-group-${item.value}`
                        const targetButton = document.getElementById(buttonItemId)
                        if (item.value === categoryButtonItemValue) {
                            targetButton.classList.add("btn-dark")
                        }else{
                            targetButton.classList.remove("btn-dark")
                        }
                    })

                    // 重新搜尋資料
                    this.getDataList();
                },
                getDataList() {
                    const params = new URLSearchParams()
                    params.append("category", this.category)
                    params.append("startDate", this.searchDate.startDate)
                    params.append("endDate", this.searchDate.endDate)
                    
                    const url = "api/AccountingTool/getDataList?" + params
                    axios({
                        method: "GET",
                        url: url,
                        headers: {
                            Authorization: `Bearer ${this.getToken()}`
                        }
                    })
                    .then((res) => {
                        this.dataList = res.data;
                        // 編輯日期格式
                        this.dataList.forEach(item => {
                                item.time = this.dateTransfer(item.time)
                        });
                    })
                },
                createPage() {
                    window.location = window.location.origin + "/AccountingData/CreateAndUpdate/Create?category=" + this.category;
                },
                editPage(dataId) {
                    window.location = window.location.origin + "/AccountingData/CreateAndUpdate/Edit?Id=" + dataId;
                },
                deleteData(dataId) {
                    const url = "api/AccountingTool/deleteData/" + dataId
                    axios({
                        method: "DELETE",
                        url: url,
                        headers: {
                            Authorization: `Bearer ${this.getToken()}`
                        }
                    })
                    .then((res) => {
                        alert(res.data)
                        this.getDataList();
                    })
                }
            }
        });
        const vm = app.mount('#app');
    </script>
}

